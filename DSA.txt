1>>> NUMBER OF BIDS:

#include <iostream>
#include <cmath>
using namespace std;

int main(){
    int t,arr[100],n,c=0;
    cin>>n;
    cin>>t;
    for(int i=0;i<n;i++){
    cin>>arr[i];
    }
    for(int i=0;i<n;i++){
        for( int j=i+1;j<n;j++){
            if(abs(arr[i]-arr[j])==t){
                c+=1;
            }
        }
    }
    cout<<c;
    return 0;
}


2>>> LCS:

#include <iostream>

#include <vector>
using namespace std;

int longestCommonSubsequence(string s1, string s2, string s3) {
    int l1 = s1.length();
    int l2 = s2.length();
    int l3 = s3.length();

    vector<vector<vector<int>>> dp(l1 + 1, vector<vector<int>>(l2 + 1, vector<int>(l3 + 1, 0)));

    for (int i = 1; i <= l1; i++) {
        for (int j = 1; j <= l2; j++) {
            for (int k = 1; k <= l3; k++) {
                if (s1[i - 1] == s2[j - 1] && s2[j - 1] == s3[k - 1]) {
                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1];
                } else {
                    dp[i][j][k] = max({dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]});
                }
            }
        }
    }
    return dp[l1][l2][l3];
}

int main() {
    string s1, s2, s3;
    cin >> s1 >> s2 >> s3;

    cout << longestCommonSubsequence(s1, s2, s3) << endl;
    return 0;
}

3>>> COUNT TRAILING ZEROS IN FACT VALUE:

#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int CountTrailindZeros(int num){
    int count=0;
    for(int i=5;num/i>0;i*=5){
        count+=num/i;
    }
    return count;
}

int main(){
    int num;
    cin>>num;
    cout<<CountTrailindZeros(num)<<endl;
    return 0;
}


4>>> BINARY TO DECIMAL:

#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main(){
    vector <int> arr;
    int num,i=0,n=0;
    cin>>num;
    while(num>0){
        arr.push_back(num%2);
        num=num/2;
        i=i+1;
        n=n+1;
    }
    reverse(arr.begin(),arr.end());
    for(i=0;i<n;i++){
        cout<<arr[i];
    }
    return 0;
}

5>>> COUNT OF SPECIFIC STRING:

#include <iostream>
#include <string>
#include <bits/stdc++.h>
using namespace std;

int main(){
    string str;
    char key;
    int count=0;
    getline(cin,str);
    cin>>key;
    for(char ch:str){
        if(ch==key||ch+32==key||ch-32==key){
            count+=1;
        }
    }
    cout<<count;
    return 0;
}

6>>> EVEN ODD:

#include <iostream>
#include <string>
#include <bits/stdc++.h>
using namespace std;

int main(){
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
    for(int i=0;i<n;i++){
        if(a[i]%2==0){
            cout<<"Even";
        }
        else{
            cout<<"Odd";
        }
    }
    return 0;
}

7>>> UNSOLD PRODUCTS:

#include <iostream>
#include <string>
#include <bits/stdc++.h>
using namespace std;
vector<int>MoveZerosToEnd(vector<int>&arr){
    int index=0;
    for(int num:arr) if(num!=0) arr[index++]=num;
    while(index<arr.size()) arr[index++]=0;
    return arr;
}
int main(){
    vector<int> arr={5,2,0,8,0,2,1};
    vector<int> result= MoveZerosToEnd(arr);
    for(int num:result) cout<<num<<" ";
    return 0;
}

8>>> MAGICAL NUMBER:

#include <iostream>
using namespace std;

// Function to check if a number is magical
bool isMagical(int n) {
    int sum = 0;
    while (n > 0) {
        int bit = n % 2;
        sum += (bit == 0) ? 1 : 2; // Convert 0 to 1 and 1 to 2, then sum
        n /= 2;
    }
    return sum % 2 != 0; // If sum is odd

}

// Function to count and print magical numbers up to n
int countMagicalNumbers(int n) {
    int count = 0;
    cout << "Magical numbers: ";
    for (int i = 1; i <= n; i++) {
        if (isMagical(i)) {
            cout << i << " ";
            count++;
        }
    }
    cout << endl;
    return count;
}

int main() {
    int n;
    cout << "Enter a number: ";
    cin >> n;
    
    int result = countMagicalNumbers(n);
    cout << "Total number of magical numbers from 1 to " << n << " is: " << result << endl;
    
    return 0;
}


9>>> PRODUCT ID'S:

#include <iostream>
using namespace std;
int main() {
    int n;
    cin>>n;
    string s;
    cin>>s;
    int vc=0,kc=0,lc=0;
    for(int i=0;i<s.size();i++){
        if(s[i]=='v')
        if(vc==0)
        vc++;
        if(s[i]=='k')
        if(kc==0)
        kc++;
        if(s[i]=='l')
        if(lc==0)
        lc++;
    }
    cout<<vc+kc+lc;
}

10>>> ALICE AND STRING:

#include <iostream>
#include <string>
using namespace std;

int longestUninterruptedSubstring(string S)
{
    int maxl = 0;
    int current = 0;
    for (char c : S)
    {
        if (c == '.')
        {
            current = 0;
        }
        else
        {
            current++;
            maxl = max(maxl, current);
        }
    }
    return maxl;
}

int main()
{
    string S;
    cout << "Enter the string: ";
    cin >> S;
    int result = longestUninterruptedSubstring(S);
    cout << "Length of the longest uninterrupted substring: " << result << endl;
    return 0;
}

11>>> REARRANGEMENT OF BITS:

#include <iostream>
#include <string>
using namespace std;
int rearrangementBits(int N){
    int count=__builtin_popcount(N);
    return(1<<count)-1;
}

int main()
{
    int N1=10;
    cout << "Input:"<<N1<<",Output:"<<rearrangementBits(N1)<<endl;
    return 0;
}

12>>> MINIMUM BADNESS:

#include <iostream>
using namespace std;
int minBadness(string S){
    int n=S.length();
    int b=0;
    char lc=' ';
    for(int i=0;i<n;i++){
        if(S[i]=='W') continue;
        if(lc!=' ' && lc!=S[i]){
            b++;
        }
        lc=S[i];
    }
    return b;
}

int main()
{
    string S;
    cin>>S;
    cout <<minBadness(S)<<endl;
    return 0;
}

13>>> FILE VERSION:




